# AWS CLI deployment command
# Execute the following command from the cfn directory:
# aws --profile capstone cloudformation create-stack --stack-name vpc-19-us-east-1-cis --template-body file://capstone-cfn/vpc.yml --parameters file://capstone-cfn/params/vpc-19-params-us-east-1-cis.json

# The data format version that the template conforms to.
AWSTemplateFormatVersion: '2010-09-09'

# The Description section contains a text string that describes the purpose of the template.
Description: >
  This template creates a AWS VPC for the CIS-5898 Capstone project.

# The Parameters section contains all of the values that are passed to the template at runtime.
# Values are fed into the template via a parameters file.
Parameters:
  VpcName:
    Description: The VPC Name name.
    Type: String
    MinLength: '1'
    MaxLength: '30'
    AllowedPattern: '[a-zA-Z0-9-]+'
    ConstraintDescription: 1 to 30 lower case alphanumeric characters.

  SupernetNumber:
    Description: The value for the second octet 10.x.0.0/16 (65534 IPs).
    Type: Number
    MinValue: '10'
    MaxValue: '250'
    ConstraintDescription: This must be a valid number between 10 and 250.

  AvailabilityZones:
    Description: Choose two AZs to use in this region.
    Type: String

  DhcpDnsDomain:
    Description: The DNS Domain Suffix for DHCP Scope.
    Type: String

  SnsEmail:
    Description: An email address to send SNS notifications to.
    Type: String

# The Resource section specifies the resources and their properties deployed in the stack.
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.0/24]]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Ref 'VpcName'

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref 'DhcpDnsDomain'
      DomainNameServers: ['AmazonProvidedDNS']

  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'Vpc'
      DhcpOptionsId: !Ref 'DhcpOptions'

# Public Subnets
  PublicSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.0/27]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [public-subnet, !Select ['0', !GetAZs '']]]
        - Key: Network
          Value: Public

  PublicSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.32/27]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [public-subnet, !Select ['1', !GetAZs '']]]
        - Key: Network
          Value: Public

# Mgmt Private Subnets
  MgmtSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.64/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [mgmt-subnet, !Select ['0', !GetAZs '']]]
        - Key: Network
          Value: Private

  MgmtSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.96/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [mgmt-subnet, !Select ['1', !GetAZs '']]]
        - Key: Network
          Value: Private

# Product Private Subnets
  ProductSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.128/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [product-subnet, !Select ['0', !GetAZs '']]]
        - Key: Network
          Value: Private

  ProductSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.160/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [product-subnet, !Select ['1', !GetAZs '']]]
        - Key: Network
          Value: Private

# Database Private Subnets
  DatabaseSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.192/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [database-subnet, !Select ['0', !GetAZs '']]]
        - Key: Network
          Value: Private

  DatabaseSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', !GetAZs '']
      VpcId: !Ref 'Vpc'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.224/27]]
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [database-subnet, !Select ['1', !GetAZs '']]]
        - Key: Network
          Value: Private

# NAT Gateway EIPs
  NatGatewayEipAz1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DeletionPolicy: Delete

  NatGatewayEipAz2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DeletionPolicy: Delete

# NAT Gateways
  NatGatewayAz1:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEipAz1.AllocationId'
      SubnetId: !Ref 'PublicSubnetAz1'

  NatGatewayAz2:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEipAz2.AllocationId'
      SubnetId: !Ref 'PublicSubnetAz2'

# S3 VPC Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref 'PublicRouteTableAz1'
        - !Ref 'PublicRouteTableAz2'
        - !Ref 'MgmtRouteTableAz1'
        - !Ref 'MgmtRouteTableAz2'
        - !Ref 'ProductRouteTableAz1'
        - !Ref 'ProductRouteTableAz2'

      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref 'Vpc'

# Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: internet-gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      InternetGatewayId: !Ref 'InternetGateway'

# Public Network Routes and Route Tables
  PublicRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [public-route-table, !GetAtt 'PublicSubnetAz1.AvailabilityZone']]

  PublicRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [public-route-table, !GetAtt 'PublicSubnetAz2.AvailabilityZone']]

  PublicRouteAz1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PublicRouteTableAz1'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  PublicRouteAz2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PublicRouteTableAz2'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz1'
      RouteTableId: !Ref 'PublicRouteTableAz1'

  PublicSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz2'
      RouteTableId: !Ref 'PublicRouteTableAz2'

# Mgmt Network Routes and Route Tables
  MgmtRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [mgmt-route-table, !GetAtt 'MgmtSubnetAz1.AvailabilityZone']]

  MgmtRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [mgmt-route-table, !GetAtt 'MgmtSubnetAz2.AvailabilityZone']]

  MgmtRouteAz1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'MgmtRouteTableAz1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz1'

  MgmtRouteAz2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'MgmtRouteTableAz2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz2'

  MgmtSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MgmtSubnetAz1'
      RouteTableId: !Ref 'MgmtRouteTableAz1'

  MgmtSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MgmtSubnetAz2'
      RouteTableId: !Ref 'MgmtRouteTableAz2'


# Product Network Routes and Route Tables
  ProductRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [product-route-table, !GetAtt 'ProductSubnetAz1.AvailabilityZone']]

  ProductRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [product-route-table, !GetAtt 'ProductSubnetAz2.AvailabilityZone']]

  ProductRouteAz1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'ProductRouteTableAz1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz1'

  ProductRouteAz2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'ProductRouteTableAz2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz2'

  ProductSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ProductSubnetAz1'
      RouteTableId: !Ref 'ProductRouteTableAz1'

  ProductSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ProductSubnetAz2'
      RouteTableId: !Ref 'ProductRouteTableAz2'

# Database Network Routes and Route Tables
  DatabaseRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [Database-route-table, !GetAtt 'DatabaseSubnetAz1.AvailabilityZone']]

  DatabaseRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: !Join ['-', [Database-route-table, !GetAtt 'DatabaseSubnetAz2.AvailabilityZone']]

  DatabaseRouteAz1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'DatabaseRouteTableAz1'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz1'

  DatabaseRouteAz2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'DatabaseRouteTableAz2'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGatewayAz2'

  DatabaseSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DatabaseSubnetAz1'
      RouteTableId: !Ref 'DatabaseRouteTableAz1'

  DatabaseSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DatabaseSubnetAz2'
      RouteTableId: !Ref 'DatabaseRouteTableAz2'

# NACL Inbound Rules
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: public-nacl

  MgmtNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: mgmt-nacl

  ProductNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: product-nacl

  DatabaseNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'Vpc'
      Tags:
        - Key: Service
          Value: infra
        - Key: Name
          Value: database-nacl

  InboundIcmpEchoPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '0'
        Type: '8'

  InboundIcmpEchoReplyPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '110'
      Protocol: '1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '0'
        Type: '0'

  InboundIcmpPathMtuPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '120'
      Protocol: '1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '4'
        Type: '3'

  InboundHttpPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '130'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'

  InboundHttpsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '140'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'

  InboundSshPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'

  InboundSmtpPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '160'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '25'
        To: '25'

  InboundEphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '500'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  InboundEphemeralUdpPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '600'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'

  InboundEspPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '700'
      Protocol: '50'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  InboundVpcTrafficPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '1000'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Join ['', ['10.', !Ref 'SupernetNumber', .0.0/16]]

  InboundAllTrafficMgmtNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'MgmtNetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  InboundAllTrafficProductNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'ProductNetworkAcl'
      RuleNumber: '110'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  InboundAllTrafficDatabaseNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'DatabaseNetworkAcl'
      RuleNumber: '120'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

# NACL Outbound Rules
  OutboundAllPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'PublicNetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  OutboundAllMgmtNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'MgmtNetworkAcl'
      RuleNumber: '110'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  OutboundAllProductNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'ProductNetworkAcl'
      RuleNumber: '120'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  OutboundAllDatabaseNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'DatabaseNetworkAcl'
      RuleNumber: '130'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

# NACL to Subnet Associations
  PublicSubnetAz1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz1'
      NetworkAclId: !Ref 'PublicNetworkAcl'

  PublicSubnetAz2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz2'
      NetworkAclId: !Ref 'PublicNetworkAcl'

  MgmtSubnetAz1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'MgmtSubnetAz1'
      NetworkAclId: !Ref 'MgmtNetworkAcl'

  MgmtSubnetAz2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'MgmtSubnetAz2'
      NetworkAclId: !Ref 'MgmtNetworkAcl'

  ProductSubnetAz1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'ProductSubnetAz1'
      NetworkAclId: !Ref 'ProductNetworkAcl'

  ProductSubnetAz2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'ProductSubnetAz2'
      NetworkAclId: !Ref 'ProductNetworkAcl'

  DatabaseSubnetAz1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'DatabaseSubnetAz1'
      NetworkAclId: !Ref 'DatabaseNetworkAcl'

  DatabaseSubnetAz2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'DatabaseSubnetAz2'
      NetworkAclId: !Ref 'DatabaseNetworkAcl'

# Security Groups
  # InstanceSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: All EC2 instances should be in this security group
  #     VpcId: !Ref 'Vpc'
  #     SecurityGroupIngress:
  #       - IpProtocol: icmp
  #         FromPort: '8'
  #         ToPort: '-1'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: icmp
  #         FromPort: '3'
  #         ToPort: '4'
  #         CidrIp: 0.0.0.0/0
  #     SecurityGroupEgress:
  #       - IpProtocol: icmp
  #         FromPort: '8'
  #         ToPort: '-1'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: icmp
  #         FromPort: '3'
  #         ToPort: '4'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Service
  #         Value: infra
  #       - Key: Name
  #         Value: instance-sg
  #
  # DnsIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: udp
  #     FromPort: '53'
  #     ToPort: '53'
  #     SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # SshIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: '22'
  #     ToPort: '22'
  #     SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # RdpIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: '3389'
  #     ToPort: '3389'
  #     SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # HttpIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: '80'
  #     ToPort: '80'
  #     SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # HttpsIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: tcp
  #     FromPort: '443'
  #     ToPort: '443'
  #     SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # DnsEgress:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     GroupId: !Ref 'InstanceSecurityGroup'
  #     IpProtocol: udp
  #     FromPort: '53'
  #     ToPort: '53'
  #     DestinationSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #
  # PublicLoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Public Load Balancer Enable HTTP/HTTPS access
  #     VpcId: !Ref 'Vpc'
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '25'
  #         ToPort: '25'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Service
  #         Value: infra
  #       - Key: Name
  #         Value: public-load-balancer-sg
  #
  # PrivateLoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Internal Load Balancer Enable HTTP/HTTPS access
  #     VpcId: !Ref 'Vpc'
  #     SecurityGroupIngress:
  #       - IpProtocol: '-1'
  #         SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  #     SecurityGroupEgress:
  #       - IpProtocol: '-1'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Service
  #         Value: infra
  #       - Key: Name
  #         Value: private-load-balancer-sg
  #
  # OutboundToInternetSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable HTTP/s, SMTP access outbound to Internet
  #     VpcId: !Ref 'Vpc'
  #     SecurityGroupEgress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '443'
  #         ToPort: '443'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '25'
  #         ToPort: '25'
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Service
  #         Value: infra
  #       - Key: Name
  #         Value: outbound-to-internet-sg

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref 'SnsEmail'
          Protocol: email
      TopicName: !Ref 'VpcName'

# The Outputs section contains all of the values that will be returned when the stack is deployed.
# This section also contains exports which can be used as inputs within other CloudFormation
# templates.
Outputs:
  VpcId:
    Value: !Ref 'Vpc'
    Export:
      Name: VpcId

  InternetGateway:
    Value: !Ref 'InternetGateway'
 
  AvailabilityZones:
    Value: !Ref 'AvailabilityZones'

  NatGatewayAz1:
    Value: !Ref 'NatGatewayAz1'

  NatGatewayAz2:
    Value: !Ref 'NatGatewayAz2'

  PublicRouteTableAz1:
    Value: !Ref 'PublicRouteTableAz1'

  PublicRouteTableAz2:
    Value: !Ref 'PublicRouteTableAz2'

  MgmtRouteTableAz1:
    Value: !Ref 'MgmtRouteTableAz1'

  MgmtRouteTableAz2:
    Value: !Ref 'MgmtRouteTableAz2'

  ProductRouteTableAz1:
    Value: !Ref 'ProductRouteTableAz1'

  ProductRouteTableAz2:
    Value: !Ref 'ProductRouteTableAz2'

  PublicSubnetAz1:
    Value: !Ref 'PublicSubnetAz1'
    Export:
      Name: PublicSubnetAz1

  PublicSubnetAz2:
    Value: !Ref 'PublicSubnetAz2'
    Export:
      Name: PublicSubnetAz2

  MgmtSubnetAz1:
    Value: !Ref 'MgmtSubnetAz1'
    Export:
      Name: MgmtSubnetAz1

  MgmtSubnetAz2:
    Value: !Ref 'MgmtSubnetAz2'
    Export:
      Name: MgmtSubnetAz2

  ProductSubnetAz1:
    Value: !Ref 'ProductSubnetAz1'
    Export:
      Name: ProductSubnetAz1

  ProductSubnetAz2:
    Value: !Ref 'ProductSubnetAz2'
    Export:
      Name: ProductSubnetAz2

  DatabaseSubnetAz1:
    Value: !Ref 'DatabaseSubnetAz1'
    Export:
      Name: DatabaseSubnetAz1

  DatabaseSubnetAz2:
    Value: !Ref 'DatabaseSubnetAz2'
    Export:
      Name: DatabaseSubnetAz2

  SnsTopic:
    Value: !Ref 'SnsTopic'
