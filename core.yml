# aws --profile demo iam create-service-linked-role --aws-service-name es.amazonaws.com
# aws --profile demo cloudformation create-stack --stack-name core-us-east-1-demo --template-body file://cfn/core.yml --parameters file://cfn/params/core-params-us-east-1-demo.json

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template demonstrates the configuration for a number of AWS services.

Parameters:
  DeploymentId:
    Type: String
    Description: A unique deployment identifier.

  Owner:
    Type: String
    Description: Email address of the person that created the stack.

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.
    Default: demo

  ElasticsearchDomainName:
    Type: String
    Description: Elasticsearch domain name

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m4.large
    ConstraintDescription: Please choose a valid instance type.

Resources:
### KMS ###
  DemoKmsCustomerMasterKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/DemoKmsCustomerMasterKey
      TargetKeyId: !Ref 'DemoKmsCustomerMasterKey' 

  DemoKmsCustomerMasterKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Demo KMS Customer Master Key.
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
            Action: kms:*
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !ImportValue 'DemoAdminUserRole'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'  
          - Sid: Allow deployment of the key
            Effect: Allow
            Principal:
              AWS:
                - !ImportValue 'DemoAdminUserRole'
                - !ImportValue 'DemoDevUserRole'
                - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !ImportValue 'DemoAdminUserRole'
                - !ImportValue 'DemoDevUserRole'
                - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: 'true'
          - Sid: Allow Lambda use of the key
            Effect: Allow
            Principal:
              AWS: !ImportValue 'DemoLambdaExecutionRole'
            Action:
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow EMR EC2 role use of the key
            Effect: Allow
            Principal:
              AWS: !ImportValue 'DemoEmrEc2Role'
            Action:
              - kms:Decrypt
          - Sid: Allow ECS Task role use of the key
            Effect: Allow
            Principal:
              AWS: !ImportValue 'DemoEcsTaskRole'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow ECS Execution role use of the key
            Effect: Allow
            Principal:
              AWS: !ImportValue 'DemoEcsExecutionRole'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow S3 notification use of key
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow anyone else to encrypt
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:Encrypt
            Resource: '*'
      Tags:
         - Key: Name
           Value: DemoKmsCustomerMasterKey

### DynamoDB ###
  DemoDynamoDbAppSettings:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: environment
          AttributeType: S
        - AttributeName: appname
          AttributeType: S
      KeySchema:
        - AttributeName: environment
          KeyType: HASH
        - AttributeName: appname
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 3
      TableName: app-settings
      Tags:
        - Key: Name
          Value: !Sub ${Service}-dynamodb-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'

  DemoDynamoDbFactors:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: environment
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: environment
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      TableName: Factors
      Tags:
        - Key: Name
          Value: !Sub ${Service}-dynamodb-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'

### EMR ###
  DemoEmrCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Applications:
      - Name: Flink
      - Name: Ganglia 
      - Name: Hadoop
      - Name: Hive
      - Name: Hue
      - Name: Livy
      - Name: MXNet
      - Name: Oozie
      - Name: Presto
      - Name: Spark
      - Name: Zeppelin
      BootstrapActions:
      - Name: download
        ScriptBootstrapAction:
          Path: !Join ['', ['s3://', !ImportValue 'DemoS3Bucket', '/emr/init/download.sh']]
      - Name: master-scheduler
        ScriptBootstrapAction:
          Args: ['instance.isMaster=true', !Join ['', ['s3://', !ImportValue 'DemoS3Bucket', '/emr/init/master-scheduler.sh']]]
          Path: !Join ['', ['s3://', !ImportValue 'DemoS3Bucket', '/emr/init/run-if']]
      Instances:
        CoreInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
            - VolumeSpecification:
                SizeInGB: 120
                VolumeType: gp2
              VolumesPerInstance: 1
            EbsOptimized: false
          InstanceCount: 2
          InstanceType: m4.xlarge
          Market: ON_DEMAND
          Name: Core
        Ec2KeyName: !Ref 'KeyName'
        Ec2SubnetId: !ImportValue 'ProductSubnetAz1' # All cluster nodes run in same AZ by design
        MasterInstanceGroup:
          EbsConfiguration:
            EbsBlockDeviceConfigs:
            - VolumeSpecification:
                SizeInGB: 120
                VolumeType: gp2
              VolumesPerInstance: 1
            EbsOptimized: false
          InstanceCount: 1
          InstanceType: m4.xlarge
          Market: ON_DEMAND
          Name: Master
        TerminationProtected: false
      JobFlowRole: !ImportValue 'DemoEmrEc2InstanceProfile' # EC2 Role
      LogUri:  !Join ['', ['s3://', !ImportValue 'DemoS3Bucket', '/logs/emr']]
      Name: !Sub ${Service}-emr-cluster-${DeploymentId}
      ReleaseLabel: emr-5.16.0
      ServiceRole: !ImportValue 'DemoEmrRole'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-emr-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Schedule
          Value: !Ref 'Schedule'
        - Key: Owner
          Value: !Ref 'Owner'
      VisibleToAllUsers: true

  DemoEmrClusterStepStreamToElasticsearch:
    Type: AWS::EMR::Step
    Properties:
      ActionOnFailure: CONTINUE
      HadoopJarStep:
        Args:
          - spark-submit
          - --deploy-mode
          - cluster
          - --driver-memory
          - 1G
          - --executor-memory
          - 1G
          - --class
          - net.demo.services.StreamToElasticsearch
          - !Join ['', ['s3://', !ImportValue 'DemoS3Bucket', '/emr/demo.jar']]
          - --aws-account
          - !Ref 'AWS::AccountId'
          - --stream-name
          - !Ref 'DemoEmrMailKinesisStream'
          - --es-nodes
          - !Join ['', ['https://', !GetAtt [DemoElasticsearchCluster, DomainEndpoint]]]
          - --es-port
          - 443
          - --es-wan-only
          - true
        Jar: command-runner.jar
      JobFlowId: !Ref 'DemoEmrCluster'
      Name: DemoStreamToElasticsearch

### Elasticsearch ###
  DemoElasticsearchCluster:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              AWS: '*'
            Action: es:*
            Resource: !Join ['', ['arn:aws:es:', !Ref 'AWS::Region',':', !Ref 'AWS::AccountId', ':domain/', !Ref 'ElasticsearchDomainName', '/*']]
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
      DomainName: !Ref 'ElasticsearchDomainName'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 200
        VolumeType: gp2
      ElasticsearchClusterConfig:
        DedicatedMasterCount: 3
        DedicatedMasterEnabled: true
        DedicatedMasterType: c4.large.elasticsearch
        InstanceCount: 2
        InstanceType: c4.2xlarge.elasticsearch
        ZoneAwarenessEnabled: true # Set to true when using a dedicated master
      ElasticsearchVersion: 6.2
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref 'DemoKmsCustomerMasterKey'
      SnapshotOptions:
        AutomatedSnapshotStartHour: 4
      Tags:
        - Key: Name
          Value: !Sub ${Service}-elasticsearch-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'
      VPCOptions:
        SecurityGroupIds:
          - !ImportValue 'DemoDefaultSecurityGroup'
        SubnetIds:
          - !ImportValue 'ProductSubnetAz1'
          - !ImportValue 'ProductSubnetAz2'

### Kinesis ###
  DemoKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${Service}-demo-${DeploymentId}
      RetentionPeriodHours: 24
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Ref 'DemoKmsCustomerMasterKey'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-demo-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'

Outputs:
  DemoElasticsearchClusterUrl:
    Value: !GetAtt [DemoElasticsearchCluster, DomainEndpoint]
    Export:
      Name: DemoElasticsearchClusterUrl

  DemoKinesisStream:
    Value: !Ref 'DemoActivitiesKinesisStream'
    Export:
      Name: DemoActivitiesKinesisStream
  
  DemoKmsCustomerMasterKey:
    Value: !GetAtt [DemoKmsCustomerMasterKey, Arn]
    Export:
      Name: DemoKmsCustomerMasterKey
