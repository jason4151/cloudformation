# AWS CLI deployment command
# Execute the following command from the cfn directory:
# aws --profile capstone cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --stack-name linux-bastion-us-east-1-cis --template-body file://capstone-cfn/windows-bastion.yml

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates a Amazon Linux Bastion EC2 instance for the CIS-5898 Capstone project.

Parameters:
  DeploymentId:
    Type: String
    Description: A unique deployment identifier.
    Default: cis

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.
    Default: capstone

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.
    Default: linux-bastion

  Owner:
    Type: String
    Description: Email address of the person that created the stack.
    Default: jmoskowitz2017@my.fit.edu

  AmiId:
    Type: String
    Description: Amazon Machine Image ID
    Default: ami-0b8d0d6ac70e5750c

Resources:
### EC2 ###
  WindowsBastionEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AmiId'
      InstanceType: !Ref 'InstanceType'
      SubnetId: !ImportValue 'PublicSubnetAz1'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'WindowsBastionEc2SecurityGroup']
      IamInstanceProfile: !Ref 'WindowsBastionInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: 'gp2'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Install AWS Tools
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            yum -y install ruby
            ./install auto
            yum install -y aws-cfn-bootstrap
            # Install Salt Minion and set system role
            yum install -y https://repo.saltstack.com/yum/amazon/salt-amzn2-repo-latest.amzn2.noarch.rpm
            yum clean expire-cache
            yum install -y salt-minion
            systemctl enable salt-minion.service
            echo 'role: linux-bastion' >> /etc/salt/grains
            systemctl start salt-minion.service
            # Send CloudFormation Signals
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}

### Security Groups ###
  WindowsBastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WindowsBastion Security Group
      VpcId: !ImportValue 'VpcId'
      Tags:
        - Key: Service
          Value: windows-bastion
        - Key: Name
          Value: windows-bastion-ec2-sg

# Allow RDP port 3389 access to Windows Bastion EC2 instance from specific addresses
  WindowsBastionEc2SecurityGroupSshInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'WindowsBastionEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '3389'
      ToPort: '3389'
      CidrIp: 50.89.175.153/32

### IAM Role & Policies ###
  WindowsBastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      Path: /

# Allow Windows Bastion service access to Assume IAM roles
  WindowsBastionAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WindowsBastionAssumeRolePolicy
      Roles:
        - !Ref 'WindowsBastionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'

# Allow Windows Bastion service access to CloudWatch
  WindowsBastionCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WindowsBastionCloudWatchPolicy
      Roles:
        - !Ref 'WindowsBastionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:List*
              - cloudwatch:Get*
              - cloudwatch:PutMetricData
            Resource: '*'

# Windows Bastion EC2 Instance profile for which the Windows Bastion IAM role is associated
  WindowsBastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WindowsBastionRole'

### Outputs:
  # WindowsBastionEc2InstancePrivateDnsName:
  #   Value: !GetAtt WindowsBastionEc2Instance.PrivateDnsName
