# aws cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --stack-name nexus-service-us-east-1-demo --template-body file://ec2-nexus-service.yaml --parameters file://params/nexus-service-params-us-east-1-demo.json

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates a Nexus EC2 instance behind a public ALB.
  https://help.sonatype.com/repomanager3/high-availability/load-balancing

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to create the deployment in.

  DeploymentId:
    Type: String
    Description: A unique deployment identifier.

  HostedZoneName:
    Type: String
    Description: The hosted zone to create a DNS entry in.

  HostedZoneInternalName:
    Type: String
    Description: The internal hosted zone to create a DNS entry in.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.

  CertificateArn:
    Type: String
    Description: SSL/TLS Certificate ARN for use with Load Balancer.

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two subnets in your VPC.

  MgmtSubnetId:
    Type: String
    Description: Select a subnet in your VPC.

  MinSize:
    Type: Number
    Default: '1'
    Description: The minimum number of instances that will be launched.

  MaxSize:
    Type: Number
    Default: '1'
    Description: The maximum number of instances that can be launched.

  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: The number of instances to launch.

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large]
    ConstraintDescription: Please choose a valid instance type.

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.

  Schedule:
    Type: String
    Description: Referenced by the schdeduler Lambda function.

  Owner:
    Type: String
    Description: Email address of the person that created the stack.

  AmiId:
    Type: String
    Description: Amazon Machine Image ID

Resources:
### EC2 ###
  NexusEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AmiId'
      InstanceType: !Ref 'InstanceType'
      SubnetId: !Ref 'MgmtSubnetId'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'NexusEc2SecurityGroup']
      IamInstanceProfile: !Ref 'NexusInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: 'gp2'
            VolumeSize: '500'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Schedule
          Value: !Ref 'Schedule'
        - Key: Owner
          Value: !Ref 'Owner'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum -y update
            yum install -y aws-cfn-bootstrap
            yum -y erase java-1.7.0-openjdk
            yum -y install java-1.8.0-openjdk
            useradd -c "Nexus Service User" nexus
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NexusEc2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource NexusEc2Instance --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          sources:
            /opt: "https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.7.1-02-unix.tar.gz"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NexusEc2Instance --region ${AWS::Region}
                runas=root
            /opt/nexus-3.0.2-02/bin/nexus.rc:
              content: !Sub |
                run_as_user="nexus"
              mode: '000664'
              owner: nexus
              group: nexus
          commands:
            01_configure_nexus:
              command: !Sub |
                #!/bin/bash
                chown -Rh nexus:nexus /opt/nexus-3.7.1-02 /opt/sonatype-work
                ln -s /opt/nexus-3.7.1-02/bin/nexus /etc/init.d/nexus
          services:
            sysvinit:
              nexus:
                enabled: true
                ensureRunning: true
                files:
                - "/app/nexus-3.6.1-02/bin/nexus.rc"

### Load Balancing ###
  NexusPublicAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Service}-${DeploymentId}
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref 'PublicSubnetIds'
      SecurityGroups: [!Ref 'NexusAlbSecurityGroup']

  NexusListenerCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerCertificate'
    Properties:
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
      ListenerArn: !Ref 'NexusPublicAlbListener'

  NexusPublicAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: NexusPublicAlb
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'NexusTargetGroup'
      LoadBalancerArn: !Ref 'NexusPublicAlb'
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'

  NexusTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: NexusPublicAlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /service/rest/v1/status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: NexusTargetGroup
      Targets:
        - Id: !Ref 'NexusEc2Instance'
      Port: 8081
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'

### Route 53 ###
  NexusDnsRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: NexusPublicAlb
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Comment: DNS name for Nexus instance.
      Name: !Join ['', [!Ref 'Service', ., !Ref 'HostedZoneName']]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt NexusPublicAlb.DNSName

  NexusInternalDnsRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: NexusEc2Instance
    Properties:
      HostedZoneName: !Ref 'HostedZoneInternalName'
      Comment: DNS name for Nexus instance.
      Name: !Join ['', [!Ref 'Service', ., !Ref 'AWS::Region', ., !Ref 'DeploymentId', ., !Ref 'HostedZoneInternalName']]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt NexusEc2Instance.PrivateDnsName

### Security Groups ###
  NexusAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Nexus ALB Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 5.5.5.5/32 # Accent Office
      Tags:
        - Key: Service
          Value: Nexus
        - Key: Name
          Value: nexus-alb-sg

  NexusEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Nexus Security Group
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Service
          Value: Nexus
        - Key: Name
          Value: nexus-ec2-sg

  NexusEc2SecurityGroup8081inbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NexusEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '8081'
      ToPort: '8081'
      SourceSecurityGroupId: !Ref 'NexusAlbSecurityGroup'

  NexusEc2SecurityGroupSshInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NexusEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

  # IAM Role & Policies
  NexusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      Path: /

  NexusS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NexusS3AccessPolicy
      Roles:
        - !Ref 'NexusRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub 'arn:aws:s3:::${NexusS3Bucket}'

  NexusInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'NexusRole'

Outputs:
  NexusEc2InstancePrivateDnsName:
    Value: !GetAtt NexusEc2Instance.PrivateDnsName
