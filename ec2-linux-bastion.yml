# aws cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --stack-name linux-bastion-us-east-1-demo --template-body file://ec2-linux-bastion.yml
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates a Linux Bastion EC2 instance.

Parameters:
  DeploymentId:
    Type: String
    Description: A unique deployment identifier.
    Default: demo

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.
    Default: demo

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  HostedZoneName:
    Type: String
    Description: Route53 DNS Hosted Zone Name.
    Default: moskowitz.int.

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.
    Default: linux-bastion

  Owner:
    Type: String
    Description: Email address of the person that created the stack.
    Default: jason@moskowitz.sh

  AmiId:
    Type: String
    Description: Amazon Machine Image ID
    Default: ami-0b8d0d6ac70e5750c

Resources:
### EC2 ###
  LinuxBastionEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AmiId'
      InstanceType: !Ref 'InstanceType'
      SubnetId: !ImportValue 'PublicSubnetAz1'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'LinuxBastionEc2SecurityGroup']
      IamInstanceProfile: !Ref 'LinuxBastionInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '20'
            VolumeType: 'gp2'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Install AWS Tools
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            yum -y install ruby mysql
            ./install auto
            yum install -y aws-cfn-bootstrap
            # Install Salt Minion and set system role
            yum install -y https://repo.saltstack.com/yum/amazon/salt-amzn2-repo-latest.amzn2.noarch.rpm
            yum clean expire-cache
            yum install -y salt-minion
            systemctl enable salt-minion.service
            echo 'role: linux-bastion' >> /etc/salt/grains
            systemctl start salt-minion.service
            salt-call state.highstate
            # Send CloudFormation Signals
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}

### EC2 EIP ###
  LinuxBastionEc2Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref 'LinuxBastionEc2Instance'

### Route 53 ###
  LinuxBastionDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Comment: DNS name for Linux Bastion instance.
      Name: !Join ['', [!Ref 'Service', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '300'
      ResourceRecords:
      - !Ref 'LinuxBastionEc2Eip'

### Security Groups ###
  LinuxBastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LinuxBastion Security Group
      VpcId: !ImportValue 'VpcId'
      Tags:
        - Key: Service
          Value: linux-bastion
        - Key: Name
          Value: linux-bastion-ec2-sg

# Allow SSH port 22 access to Linux Bastion EC2 instance from Specific IP address
  LinuxBastionEc2SecurityGroupSshHomeInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Specific Access Port 22
      GroupId: !Ref 'LinuxBastionEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 5.5.5.5/32

### IAM Role & Policies ###
  LinuxBastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      Path: /

# Allow Linux Bastion service access to Assume IAM roles
  LinuxBastionAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LinuxBastionAssumeRolePolicy
      Roles:
        - !Ref 'LinuxBastionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'

# Allow Linux Bastion service access to CloudWatch
  LinuxBastionCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LinuxBastionCloudWatchPolicy
      Roles:
        - !Ref 'LinuxBastionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:List*
              - cloudwatch:Get*
              - cloudwatch:PutMetricData
            Resource: '*'

# Linux Bastion EC2 Instance profile for which the Linux Bastion IAM role is associated
  LinuxBastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'LinuxBastionRole'

Outputs:
  LinuxBastionEc2InstancePrivateDnsName:
    Value: !GetAtt LinuxBastionEc2Instance.PrivateDnsName
