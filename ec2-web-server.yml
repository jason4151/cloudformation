# Production Stack:
# aws cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --stack-name web-server-prod-us-east-1-demo --template-body file://ec2-web-server.yml --parameters file://params/web-server-prod-params-us-east-1-demo.json
#
# Test Stack:
# aws cloudformation create-stack --capabilities CAPABILITY_NAMED_IAM --stack-name web-server-test-us-east-1-demo --template-body file://ec2-web-server.yml --parameters file://params/web-server-test-params-us-east-1-demo.json

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates a Web Server (Apache) EC2 instance.

Parameters:
  DeploymentId:
    Type: String
    Description: A unique deployment identifier.
    Default: demo

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.
    Default: demo

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  HostedZoneName:
    Type: String
    Description: Route53 DNS Hosted Zone Name.
    
  HostedZoneInternalName:
    Type: String
    Description: Route53 DNS Hosted Zone Name.

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.
    Default: web-server

  Owner:
    Type: String
    Description: Email address of the person that created the stack.

  AmiId:
    Type: String
    Description: Amazon Machine Image ID
    Default: ami-0b8d0d6ac70e5750c

  GitHubAccount:
    Type: String
    Description: GitHub Account
    Default: jason4151

  GitHubRepository:
    Type: String
    Description: GitHub Repository
    Default: php-crud-rds

  GitHubBranch:
    Type: String
    Description: GitHub Branch
    Default: master

# The Resources section specifies the resources and their properties deployed in the stack.
Resources:
### EC2 ###
  WebServerEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'AmiId'
      InstanceType: !Ref 'InstanceType'
      SubnetId: !ImportValue 'PublicSubnetAz1'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [!Ref 'WebServerEc2SecurityGroup']
      IamInstanceProfile: !Ref 'WebServerInstanceProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '20'
            VolumeType: 'gp2'
      Tags:
        - Key: Name
          Value: !Sub ${Service}-${DeploymentId}
        - Key: Service
          Value: !Ref 'Service'
        - Key: Owner
          Value: !Ref 'Owner'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Install AWS Tools
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            yum -y install ruby
            ./install auto
            yum install -y aws-cfn-bootstrap
            # Install Salt Minion and set system role
            yum install -y https://repo.saltstack.com/yum/amazon/salt-amzn2-repo-latest.amzn2.noarch.rpm
            yum clean expire-cache
            yum install -y salt-minion
            systemctl enable salt-minion.service
            echo 'role: web-server' >> /etc/salt/grains
            systemctl start salt-minion.service
            salt-call state.highstate
            # Send CloudFormation Signals
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerEc2Instance --region ${AWS::Region}

### EC2 EIP ###
  WebServerEc2Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref 'WebServerEc2Instance'

### S3 ###
  WebServerS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['', [ demo, -, !Ref 'Service', -, !Ref 'AWS::Region']]
      VersioningConfiguration:
        Status: Enabled

### CodeDeploy ###
  WebServerCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${Service}-${DeploymentId}	    
      ComputePlatform: Server

  WebServerCodeDeployDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref 'WebServerCodeDeployApplication'
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        - Key: Service
          Value: !Ref 'Service'
          Type: KEY_AND_VALUE
      ServiceRoleArn: 
        Fn::GetAtt: [ WebServerRole, Arn ]  

### CodePipeline ###
  WebServerCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Service}-code-${DeploymentId}
      RoleArn: !GetAtt [WebServerCodePipelineRole, Arn]
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceArtifact
          Configuration:
            Owner: !Ref 'GitHubAccount'
            Repo: !Ref 'GitHubRepository'
            Branch: !Ref 'GitHubBranch'
            OAuthToken: !Join ['', ['{{resolve:secretsmanager:', GitHubApiKey, ':SecretString:GitHubApiKey}}' ]]  
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Artifact
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CodeDeploy
          InputArtifacts:
          - Name: SourceArtifact
          Configuration:
            ApplicationName: !Ref 'WebServerCodeDeployApplication'
            DeploymentGroupName: !Ref 'WebServerCodeDeployDeploymentGroup'
          RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref 'WebServerS3Bucket'

### Route 53 ###
  WebServerDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Comment: DNS name for Web Server instance.
      Name: !Join ['', [!Ref 'Service', -, !Ref 'DeploymentId', ., !Ref 'HostedZoneName']]
      Type: A
      TTL: '300'
      ResourceRecords:
      - !Ref 'WebServerEc2Eip'

  WebServerInternalDnsRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: WebServerEc2Instance
    Properties:
      HostedZoneName: !Ref 'HostedZoneInternalName'
      Comment: DNS name for WebServer instance.
      Name: !Join ['', [!Ref 'Service', -, !Ref 'DeploymentId', ., !Ref 'HostedZoneInternalName']]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt WebServerEc2Instance.PrivateDnsName

### Security Groups ###
  WebServerEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WebServer Security Group
      VpcId: !ImportValue 'VpcId'
      Tags:
        - Key: Service
          Value: WebServer
        - Key: Name
          Value: web-server-ec2-sg

# Allow Web port 80 access to WebServer EC2 instance from VPC addresses
  WebServerEc2SecurityGroup80inbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: VPC Access Port 80
      GroupId: !Ref 'WebServerEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.19.0.0/24

# Allow Web port 80 access to WebServer EC2 instance from Specific IP address
  WebServerEc2SecurityGroup80FitInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Specific Access Port 80
      GroupId: !Ref 'WebServerEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 5.5.5.5/32

# Allow SSH port 22 access to WebServer EC2 instance from VPC addresses
  WebServerEc2SecurityGroupSshInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: VPC Access Port 22
      GroupId: !Ref 'WebServerEc2SecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.19.0.0/24

### IAM Role & Policies ###
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codedeploy.amazonaws.com
            Action:
                - sts:AssumeRole
      Path: /

# Allow Web Server service access to S3 Bucket
  WebServerS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebServerS3AccessPolicy
      Roles:
        - !Ref 'WebServerRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub 'arn:aws:s3:::${WebServerS3Bucket}/*'

# Allow Web Server service access to Assume IAM roles
  WebServerAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebServerAssumeRolePolicy
      Roles:
        - !Ref 'WebServerRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'

# Allow Web Server service access to CloudWatch
  WebServerCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebServerCloudWatchPolicy
      Roles:
        - !Ref 'WebServerRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:ListMetrics
              - cloudwatch:GetMetricStatistics
              - cloudwatch:PutMetricData
            Resource: '*'

# Allow CodeDeploy service to perform actions on Web Server 
  WebServerCodeDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebServerCodeDeployPolicy
      Roles:
        - !Ref 'WebServerRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ec2:Describe*
              - sns:Publish
              - tag:GetTags
              - tag:GetResources
            Resource:
              - '*'

# Allow CodePipeline service to peform actions on Web Server
  WebServerCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: WebServerCodePipelinePolicy
        PolicyDocument:
          Statement:
          - Action:
            - codedeploy:*
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            Effect: Allow
          - Action:
            - s3:*
            - cloudformation:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'

# Web Server EC2 Instance profile for which the Web Server IAM role is associated
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WebServerRole'

Outputs:
  WebServerEc2InstancePrivateDnsName:
     Value: !GetAtt WebServerEc2Instance.PrivateDnsName
