# aws cloudformation create-stack --stack-name ecs-cluster-us-east-1-demo --template-body file://ecs.yaml --parameters file://params/ecs-params-us-east-1-demo.json

AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates an Amazon ECS cluster with auto scaling for a demo application.

Parameters:
  DeploymentId:
    Type: String
    Description: A unique deployment identifier.

  Owner:
    Type: String
    Description: Email address of the person that created the stack.

  Service:
    Type: String
    Description: Name of the service or product that is associated with this stack.
    Default: example

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair to enable SSH access to the ECS instances.
    Default: demo

  EcsContainerHostMinSize:
    Type: Number
    Default: '3'
    Description: The minimum number of instances that will be launched in the cluster.

  EcsContainerHostMaxSize:
    Type: Number
    Default: '6'
    Description: The maximum number of instances that can be launched in the cluster.

  EcsContainerHostDesiredCapacity:
    Type: Number
    Default: '3'
    Description: The number of instances to launch in the cluster.

  InstanceType:
    Description: ECS EC2 instance type
    Type: String
    Default: r5.large

  DemoAppImageUrl:
    Type: String
    Description: Docker Image URL.

  ServiceDesiredCount:
    Type: Number
    Default: '1'
    Description: Number of containers to launch in your ECS service.

  ConnectorsDbUsername:
    Type: String
    Description: Connectors DB username.

  ConnectorsDbUserPassword:
    Type: String
    Description: Connectors DB user password.

Mappings:
  RegionToAmi:
    us-east-1:
      AmiId: ami-28456852
    us-east-2:
      AmiId: ami-ce1c36ab
    us-west-1:
      AmiId: ami-74262414
    us-west-2:
      AmiId: ami-decc7fa6
    eu-west-1:
      AmiId: ami-1d46df64
    eu-central-1:
      AmiId: ami-509a053f
    ap-northeast-1:
      AmiId: ami-872c4ae1
    ap-southeast-1:
      AmiId: ami-910d72ed
    ap-southeast-2:
      AmiId: ami-58bb443a

Resources:
  DemoEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Service}-ecs-${DeploymentId}

  DemoEcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier:
        - !ImportValue 'ProductSubnetAz1'
        - !ImportValue 'ProductSubnetAz2'
      LaunchConfigurationName: !Ref 'DemoContainerInstances'
      MinSize: !Ref 'EcsContainerHostMinSize'
      MaxSize: !Ref 'EcsContainerHostMaxSize'
      DesiredCapacity: !Ref 'EcsContainerHostDesiredCapacity'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 3600
      NotificationConfiguration:
        TopicARN: !ImportValue 'DemoSnsTopic'
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ${Service}-asg-${DeploymentId}
          PropagateAtLaunch: true
        - Key: Service
          Value: !Ref 'Service'
          PropagateAtLaunch: true
        - Key: Owner
          Value: !Ref 'Owner'
          PropagateAtLaunch: true

  DemoAsgEcsClusterMemScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'DemoEcsAutoScalingGroup'
      Cooldown: '300'
      PolicyType: SimpleScaling
      ScalingAdjustment: 1

  DemoAsgEcsClusterMemScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'DemoEcsAutoScalingGroup'
      Cooldown: '300'
      PolicyType: SimpleScaling
      ScalingAdjustment: -1

  DemoAsgEcsClusterCpuScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'DemoEcsAutoScalingGroup'
      Cooldown: '300'
      PolicyType: SimpleScaling
      ScalingAdjustment: 1

  DemoAsgEcsClusterCpuScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'DemoEcsAutoScalingGroup'
      Cooldown: '300'
      PolicyType: SimpleScaling
      ScalingAdjustment: -1

  DemoAsgEcsClusterMemAlarmHigh:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - !Ref 'DemoAsgEcsClusterMemScaleOutPolicy'
        - !ImportValue 'DemoSnsTopic'
        AlarmDescription: Scale up once Mem utilization exceeds the threshold for 2 minutes.
        AlarmName: !Sub ${Service}-demo-cluster-mem-alarm-high-${DeploymentId}
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref 'DemoEcsAutoScalingGroup'
        EvaluationPeriods: '2'
        MetricName: MemoryReservation
        Namespace: !Sub ${Service}-demo-${DeploymentId}
        Period: '60'
        Statistic: Maximum
        Threshold: '75'

  DemoAsgEcsClusterMemAlarmLow:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - !Ref 'DemoAsgEcsClusterMemScaleInPolicy'
        - !ImportValue 'DemoSnsTopic'
        AlarmDescription: Scale in once Mem utilization is less than the threshold for 2 minutes.
        AlarmName: !Sub ${Service}-demo-cluster-mem-alarm-low-${DeploymentId}
        ComparisonOperator: LessThanThreshold
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref 'DemoEcsAutoScalingGroup'
        EvaluationPeriods: '2'
        MetricName: MemoryReservation
        Namespace: !Sub ${Service}-demo-${DeploymentId}
        Period: '60'
        Statistic: Maximum
        Threshold: '25'

  DemoAsgEcsClusterCpuAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Ref 'DemoAsgEcsClusterCpuScaleOutPolicy'
      - !ImportValue 'DemoSnsTopic'
      AlarmDescription: Scale up once CPU utilization exceeds the threshold for 5 minutes.
      AlarmName: !Sub ${Service}-demo-cluster-cpu-alarm-high-${DeploymentId}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'DemoEcsAutoScalingGroup'
      EvaluationPeriods: '5'
      MetricName: CPUUtilization
      Namespace: !Sub ${Service}-demo-${DeploymentId}
      Period: '60'
      Statistic: Average
      Threshold: '90'

  DemoAsgEcsClusterCpuAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Ref 'DemoAsgEcsClusterCpuScaleInPolicy'
      - !ImportValue 'DemoSnsTopic'
      AlarmDescription: Scale down once CPU utilization falls below the threshold for 5 minutes.
      AlarmName: !Sub ${Service}-demo-cluster-cpu-alarm-low-${DeploymentId}
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'DemoEcsAutoScalingGroup'
      EvaluationPeriods: '5'
      InsufficientDataActions:
      - !Ref 'DemoAsgEcsClusterCpuScaleInPolicy'
      MetricName: CPUUtilization
      Namespace: !Sub ${Service}-demo-${DeploymentId}
      Period: '60'
      Statistic: Average
      Threshold: '70'

  DemoContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ RegionToAmi, !Ref "AWS::Region", AmiId ]
      SecurityGroups:
        - !ImportValue 'DemoDefaultSecurityGroup'
        - !ImportValue 'DemoSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !ImportValue 'DemoEcsEc2InstanceProfile'
      KeyName: !Ref 'KeyName'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Update the EC2 instance
            yum update -y

            # Install aws-cfn-bootstrap, awslogs and the jq JSON parser
            yum install -y aws-cfn-bootstrap awslogs jq

            # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
            region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /var/log/dmesg
            log_stream_name = {cluster}/{container_instance_id}
            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /var/log/messages
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/docker]
            file = /var/log/docker
            log_group_name = /var/log/docker
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%S.%f

            [/var/log/ecs/ecs-init.log]
            file = /var/log/ecs/ecs-init.log
            log_group_name = /var/log/ecs/ecs-init.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            [/var/log/ecs/ecs-agent.log]
            file = /var/log/ecs/ecs-agent.log.*
            log_group_name = /var/log/ecs/ecs-agent.log
            log_stream_name = {cluster}/{container_instance_id}
            datetime_format = %Y-%m-%dT%H:%M:%SZ

            EOF

            # Grab the cluster and container instance names for use in awslogs.conf
            cluster=${DemoEcsCluster}
            container_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            # Replace the cluster name and container instance ID placeholders with the actual values
            sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
            sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

            service awslogs start
            chkconfig awslogs on
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DemoContainerInstances --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DemoEcsAutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${DemoEcsCluster}  >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DemoContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DemoContainerInstances --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

# Demo App Service
  DemoAppService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'DemoEcsCluster'
      ServiceName: !Sub ${Service}-service-${DeploymentId}
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      TaskDefinition: !Ref 'DemoAppTaskDefinition'

  DemoAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !ImportValue 'DemoEcsTaskRole'
      Family: !Sub ${Service}-task-${DeploymentId}
      Volumes:
      - Host:
          SourcePath: /var/log
        Name: var-log
      ContainerDefinitions:
      - Name: !Sub ${Service}-task-${DeploymentId}
        Essential: true
        Image: !Ref 'DemoAppImageUrl'
        MemoryReservation: '1000'
        Environment:
          - Name: spring.profiles.active
            #Value: !Ref 'DeploymentId'
            Value: prod
          - Name: LOG_PATH
            Value: /var/log/accent-cs
        PortMappings:
        - HostPort: 0
          ContainerPort: 8080
        MountPoints:
        - ContainerPath: /var/log
          SourceVolume: var-log

  DemoAppServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: DemoAppService
    Properties:
      MaxCapacity: 6
      MinCapacity: 2
      ResourceId: !Join ['/', [service, !Ref 'DemoEcsCluster', !GetAtt [DemoAppService, Name]]]
      RoleARN: !ImportValue 'DemoEcsServiceAutoScalingRole'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  DemoAppServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'DemoAppServiceScalingTarget'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  DemoAppServiceScalingCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Containers CPU Utilization High
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      AlarmActions:
      - !Ref 'DemoAppServiceScalingPolicy'
      - !ImportValue 'DemoSnsTopic'
      Dimensions:
      - Name: ServiceName
        Value: !Sub ${Service}-alarm-${DeploymentId}
      - Name: ClusterName
        Value: !Ref 'DemoEcsCluster'
      ComparisonOperator: GreaterThanOrEqualToThreshold

### S3 ###
  DemoAppConnectorS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${Service}-bucket-${DeploymentId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !ImportValue 'DemoKmsCustomerMasterKey'
            SSEAlgorithm: aws:kms         
      VersioningConfiguration:
        Status: Enabled

Outputs:
  DemoEcsCluster:
    Description: ECS Cluster Name
    Value: !Ref 'DemoEcsCluster'
